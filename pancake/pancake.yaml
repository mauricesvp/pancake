PANCAKE:
  # "CPU", "GPU", "0", "1", ... (for specific gpu device)
  DEVICE: "1"

  LOGGING:
    # One of DEBUG, INFO, WARNING, ERROR, CRITICAL
    # For now this only changes the level in run.py
    LEVEL: "INFO"

  DATA:
    #             SUPPORTED SOURCE TYPES
    # ~ '../path/to/image'    - single image
    # ~ '../path/to/video'    - video frames 
    # ~ '../path/to/imagedir' - sequence of images 
    # ~ ['../path/to/dir1', 
    #    '../path/to/dir2',   - directories with videos
    #    '../path/to/dir3']     /sequence of images
    # ~ 'url_to_streams.txt'  - live streams    
    SOURCE: 
      '../samples/streams.txt'
      # '../samples/output.avi'
      # - "../samples/r45/1l"
      # - "../samples/r45/1c"
      # - "../samples/r45/1r"
    ROI:
      # A:
      #   - 1200  # x0
      #   - 550  # y0
      #   - 3775  # x1
      #   - 1300  # y1
      # B:
      #   - 0  # x0
      #   - 550  # y0
      #   - 3840  # x1
      #   - 1350  # y1
      # C:
      #   - 25  # x0
      #   - 600  # y0
      #   - 3100  # x1
      #   - 1350  # y1

  DETECTOR:
    NAME: "yolo_custom"
    # NAME: "yolo_simple"

    BACKEND: "dei"  # divide et impera
    # BACKEND: "simple"

    ASYNC_BACKEND:
      # only available with multiple gpus, 1 gpu per worker
      USE: True
      DEVICES:
        - "1"
        - "2"
      NUM_WORKERS: 1
      IMG_Q_SIZE: 500
      DET_Q_SIZE: 500

    DEI:
      SIMPLE: False

    YOLO_SIMPLE:
      size: "s"

    YOLO_CUSTOM:
      model: "yolov5"         # yolo custom class from registry 
      weights: "yolov5s.pt"  # weights to be loaded
      
      img_size: 640           # applies on standard and trt
      conf_thres: 0.45        # confidence threshold and trt
      iou_thres: 0.7          # iou threshold, applies on standard
      classes: null           # filtered classes, applies on standard
      agnostic_nms: True      # agnostic nms, applies on standard
      max_det:  13            # max detections per infered frame 
      
      # TENSORRT
      trt: False              # use trt engine for inference
      trt_engine_path: "tensorrtx/yolov5/build_5s6_bs17/yolov5s6.engine"     # path to locally compiled engine
      trt_plugin_library: "tensorrtx/yolov5/build_5s6_bs17/libmyplugins.so"  # path to locally compiled lib
      
  TRACKER:
    NAME: "centroid"

    CENTROID:
      TRACKER_CFG_PATH: "../configs/tracker/centroid.yaml"
    DEEPSORT:
      TRACKER_CFG_PATH: "../configs/tracker/deep_sort.yaml"

  RESULT_PROCESSOR:
    # GENERAL 
    VIEW_RES: False           # visualize results (not available when ASYNC_PROC)
    SAVE_RES: False           # save results
    ASYNC_PROC: True         # asynchronous result processing on dedicated slave process
    DEBUG: False              # manual frame stepping (only available when VIEW_RES)

    # ASYNC QUEUE
    Q_SIZE: 10000             # queue size for results sent from main loop to result processor
    PUT_BLOCKED: True         # block main loop until free slot available to put in queue, otherwise skip this frame
    PUT_TIMEOUT: 2.0          # (when BLOCK) raise exception after timeout s waiting for free slot

    # DRAW OPTIONS
    DRAW_DET: True            # draw detection boxes
    DRAW_TRACKS: True         # draw track boxes (with respective id)
    DRAW_TRACK_HIST: False    # draw corresponding tracks
    MAX_TRACK_HIST_LEN: 1000  # max track history length

    # DRAW DETAILS
    HIDE_LABELS: False        # hide class labels and track ids
    HIDE_CONF: False          # hide detection confidences

    LINE_THICKNESS: 3         # general line thickness

    # SAVING
    MODE: "image"             # "image" or "video"
    PATH: "pancake_results"   # parent save directory
    SUBDIR: "run"             # target subdirectory prefix, which will be incremented for each run
    VID_FPS: 5               # fps of the merged video, when mode = "video"
    EXIST_OK: True            # save in already existing dir, 
                              # do not increment automatically
